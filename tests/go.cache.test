<?php

class GoCacheTestCase extends DrupalUnitTestCase {

  public function getInfo() {
    return array(
      'name' => 'Go Cache',
      'description' => "Make sure the go_cache() is working correctly.",
      'group' => 'Go Module'
    );
  }

  public function testClosure() {
    $options = array(
      'cache_id' => 'go_test:time:' . __FUNCTION__,
      'ttl' => '+ 15 minutes',
      'bin' => 'cache',
      'reset' => TRUE,
    );

    // Init the value
    $time_1 = go_cache($options, function () {
        return time();
      });
    sleep(2);

    // Call go_cache() again
    $time_2 = go_cache($options, function () {
        return time();
      });

    // The value should be same — it's cached.
    $this->assertEqual($time_1, $time_2);
  }

  public function testStringCallback() {
    $options = array(
      'cache_id' => 'go_test:time:' . __FUNCTION__,
      'ttl' => '+ 15 minutes',
      'bin' => 'cache',
      'reset' => TRUE,
    );

    // Init the value
    $time_1 = go_cache($options, 'time');
    sleep(2);

    // Call go_cache() again
    $time_2 = go_cache($options, 'time');

    // The value should be same — it's cached.
    $this->assertEqual($time_1, $time_2);
  }

  public function testStringCallbackWithArguments() {
    $options = array(
      'cache_id' => 'go_test:string:' . __FUNCTION__,
      'ttl' => '+ 15 minutes',
      'bin' => 'cache',
      'reset' => TRUE,
    );

    // Init the value
    $string_1 = go_cache($options, 'sprintf', array('Timestamp: %d', time()));
    sleep(2);

    // Call go_cache() again
    $string_2 = go_cache($options, 'sprintf', array('Timestamp: %d', time()));

    // The value should be same — it's cached.
    $this->assertEqual($string_1, $string_2);
  }

  public function testObjectCallback() {
    $options = array(
      'cache_id' => 'go_test:time:' . __FUNCTION__,
      'ttl' => '+ 15 minutes',
      'bin' => 'cache',
      'reset' => TRUE,
    );

    // Init the value
    $time_1 = go_cache($options, 'GoCacheTestCase::time');
    sleep(2);

    // Call go_cache() again
    $time_2 = go_cache($options, 'GoCacheTestCase::time');

    // The value should be same — it's cached.
    $this->assertEqual($time_1, $time_2);
  }

  /**
   * Helper method for testObjectCallback().
   * @return int
   */
  public function time() {
    return time();
  }

}

/*
 * Test case for 403 redirect
 */
class GoPreprocessPageHandle403 extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Go Handle 403',
      'description' => "Make sure the 403 autoredirect feature is working correctly.",
      'group' => 'Go Module'
    );
  }

  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp(array('go'));
  }

  /**
   * Test error 403 redirect to login page
   */
  public function testGoPreprocessPageHandle403() {
    $this->drupalGet('admin/modules');
    $this->assertText(t('Request new password'), 'In login page, the text "Request new password".');
  }
}

/*
 * Test case for 404 redirect
 */
class GoPreprocessPageHandle404 extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Go Handle 404',
      'description' => "Make sure the 404 autoredirect feature is working correctly.",
      'group' => 'Go Module'
    );
  }

  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp(array('go'));
    // Create and log in our privileged user.
    $this->privileged_user = $this->drupalCreateUser(array(
      'search content',
      'use advanced search',
    ));
    $this->drupalLogin($this->privileged_user);
  }

  /**
   * Test error 403 redirect to login page
   */
  public function testGoPreprocessPageHandle404() {
    $this->drupalGet('not-exist-page');
    $this->assertText(t('Search'), 'In search page with correct key.');
  }
}
