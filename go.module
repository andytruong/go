<?php

/**
 * Autloading feature.
 *
 * This feature may slow down your Drupal a bit, to disable this function, define
 * GO_DISABLE_AUTOLOAD in your settings.php
 *
 * To make sure your classes are loaded by go autoloader, please implements
 * hook_go_api().
 *
 * @see Issue #24
 */
if (!defined('GO_DISABLE_AUTOLOAD')) {
  require_once dirname(__FILE__) . '/includes/go.autoload.inc';
}

/**
 * Implements hook_init().
 */
function go_init() {
  go_google_analytics_code_insert();
}

/**
 * Implements hook_go_api()
 */
function go_go_api() {
  return array('api' => '1.0');
}

/**
 * Get modules that implements Go API.
 *
 * @return array
 */
function go_get_module_apis($reset = FALSE) {
  if ($reset) {
    $cache = &drupal_static('ctools_plugin_api_info');
    if (isset($cache['go'][$api])) {
      unset($cache['go'][$api]);
    }
  }

  ctools_include('plugins');
  $return = ctools_plugin_api_info('go', $api, '1.0', '1.0');

  return $return;
}

/**
 * Helper function for quick cache get/set.
 *
 * @code
 *   $nid = $vid = 1;
 *
 *   $options['ttl'] = '+ 15 minutes';
 *   $options['cache_id'] = "node:{$nid}";
 *   $options['file'] = '/path/to/file.php;
 *   $options['reset'] = FALSE;
 *
 *   // Use case 1:
 *   $data = go_cache($options, function() use ($nid, $vid) {
 *     return node_load($nid, $vid);
 *   });
 *
 *   // Use case 2:
 *   $data = go_cache($options, 'node_load', array($nid, $vid));
 *
 * @endcode
 *
 * If GODEV constant is defined, go_cache() is by passed rebuild the cache if
 * $_GET['nocache'] is not empty.
 *
 * @param  [type] $options
 * @param  Closure|string $callback
 * @param  array  $arguments
 * @return mixed
 * @see GoCacheTestCase
 */
function go_cache($options, $callback, $arguments = array()) {
  // #####################
  // Get/Build arguments
  // #####################
  $bin = !empty($options['bin']) ? $options['bin'] : 'cache';
  $ttl = !empty($options['ttl']) ? $options['ttl'] : '+ 15 minutes';
  $reset = !empty($options['reset']) ? $options['reset'] : FALSE;
  $expire = strtotime($ttl);

  // No cache_id, can not fetch, can not write, this function is useless.
  if (empty($options['cache_id']) || !is_string($options['cache_id'])) {
    throw new Exception('Please provide a valid cache ID');
  }
  $cache_id = $options['cache_id'];

  // Allow dev to force rebuilding all caches on page
  if (defined('GODEV') && !empty($_GET['nocache'])) {
    $reset = TRUE;
  }

  // #####################
  // Fetch the cached data
  // #####################
  if (!$reset) {
    if ($cache = cache_get($cache_id, $bin)) {
      return $cache->data;
    }
  }

  // #####################
  // Build cache data
  // #####################
  if (is_a($callback, 'Closure')) {
    $return = $callback();
  }
  elseif (is_callable($callback)) {
    $return = call_user_func_array($callback, $arguments);
  }

  // #####################
  // Write the cache
  // #####################
  cache_set($cache_id, $return, $bin, $expire);

  return $return;
}

/**
 * build google analytics code
 * @return string google analytics code
 */
function go_analytics_script_code($google_analytics_id) {
  //get site domain
  $domain = $GLOBALS['base_url'];
  $domain = preg_replace('/^(http|https)+:\/\/+/si', '', $domain);
  return "(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  ga('create', '$google_analytics_id', '$domain');
  ga('send', 'pageview');";
}

/**
 * insert google analytics code into every page footer
 */
function go_google_analytics_code_insert() {
  //if defined GO_GOOGLE_ANALYTICS insert google analytics code into page footer
  if (defined('GO_GOOGLE_ANALYTICS')) {
    //insert analytics code
    $google_analytics_code = go_analytics_script_code(GO_GOOGLE_ANALYTICS);
    drupal_add_js($google_analytics_code, array(
      'type' => 'inline',
      'scope' => 'footer',
    ));
  }
}
