diff --git a/README.txt b/README.txt
index b8e6b08..6b69ee0 100644
--- a/README.txt
+++ b/README.txt
@@ -43,4 +43,14 @@ Features
 4. Back ported some Components from Drupal 8
 
   - \Drupal\Component\Uuid
-  - \DRupal\Core\KeyValueStore
+  - \Drupal\Core\KeyValueStore
+
+5. Simple Google Analytics integration
+
+  In settings.php configure your Google Analytics code by adding this line:
+
+  define('GO_GOOGLE_ANALYTICS', 'UA-****');
+
+6. Created new golive command
+   Used command: drush golive --cache=1 --js=1 --update=1
+   Please run command drush golive --help for help
\ No newline at end of file
diff --git a/drush/go.download.inc b/drush/go.download.inc
index 7a802cd..2f7b7b0 100644
--- a/drush/go.download.inc
+++ b/drush/go.download.inc
@@ -1,6 +1,12 @@
 <?php
 
 /**
+ * @file ./drush/go.download.inc
+ *
+ * @author Andy Truong
+ */
+
+/**
  * Callback function to download the libraries for your Drupal.
  *
  * @param  string $library
diff --git a/drush/go.drush.inc b/drush/go.drush.inc
index 0d0370c..d5c9daa 100644
--- a/drush/go.drush.inc
+++ b/drush/go.drush.inc
@@ -2,15 +2,16 @@
 
 /**
  * @file
- *   Go Drush commands
+ * Go Drush commands
  */
-
 require_once dirname(__FILE__) . '/go.download.inc';
 require_once dirname(__FILE__) . '/go.hipchat.inc';
 require_once dirname(__FILE__) . '/go.dev.inc';
+require_once dirname(__FILE__) . '/go.live.inc';
 
 /**
  * Implements hook_drush_command()
+ *
  * @return array
  */
 function go_drush_command() {
@@ -51,7 +52,7 @@ function go_drush_command() {
     // No bootstrap is needed
     'bootstrap' => DRUSH_BOOTSTRAP_DRUSH,
   );
-  
+
   $items['go-dev'] = array(
     'description' => dt('Special drush commands, provided by Go1, execute some dev configurations.'),
     'options' => array(
@@ -73,7 +74,7 @@ function go_drush_command() {
     'aliases' => array('godev'),
     'bootstrap' => DRUSH_BOOTSTRAP_DRUPAL_FULL,
   );
-  
+
   $items['go-mail'] = array(
     'description' => dt('Command to sent email.'),
     'options' => array(
@@ -89,5 +90,35 @@ function go_drush_command() {
     'bootstrap' => DRUSH_BOOTSTRAP_DRUSH,
   );
 
+  $items['go-live'] = array(
+    'description' => dt('Command to enable page/block caching and js/css aggregation Simultaneous Disable UI modules enable module Update!'),
+    'option' => array(
+      'cache' => dt('value equal 1 is enable cache or equal 0 not enable cache'),
+      'js' => dt('value equal 1 is enable js aggregation or 0 if vice versa'),
+      'update' => dt('value 1 if enable Module Update or 0 to vice versa not enable'),
+    ),
+    'examples' => array(
+      'drush golive --cache=1 --js=1 --update=1',
+      'description' => "--cache=1 if enable page/block caching or --cache=0 not enable \n\r--js=1 if enable js/css aggregation --js=0 to vice versa \n\r--update=1 if enable module update or --update=0 if not enable \n\rNotes: Do not use option will to the default value is 1",
+    ),
+    'aliases' => array('golive'),
+    'bootstrap' => DRUSH_BOOTSTRAP_DRUPAL_FULL,
+  );
+
   return $items;
 }
+
+
+/**
+ * Request confirmation from the user
+ * 
+ * @param string $msg message will print
+ */
+function go_drush_confirm($msg) {
+  $y_option = drush_get_option('y');
+  if ($y_option != 1) {
+    return drush_confirm($msg);
+  }
+
+  return TRUE;
+}
diff --git a/drush/go.hipchat.inc b/drush/go.hipchat.inc
index 15ba333..db43e21 100644
--- a/drush/go.hipchat.inc
+++ b/drush/go.hipchat.inc
@@ -1,6 +1,12 @@
 <?php
 
 /**
+ * @file ./drush/go.hipchat.inc
+ *
+ * @author Andy Truong
+ */
+
+/**
  * Callback function to send a message to Hipchat room.
  *
  * @param  string $room_id
@@ -63,4 +69,3 @@ function go_drush_hipchat_format_message($msg) {
   $msg = _filter_autop($msg);
   return $msg;
 }
-
diff --git a/drush/go.live.inc b/drush/go.live.inc
new file mode 100644
index 0000000..3302f05
--- /dev/null
+++ b/drush/go.live.inc
@@ -0,0 +1,192 @@
+<?php
+
+/**
+ * @file ./drush/go.live.inc
+ *
+ * @author Quyen Bui
+ */
+
+function drush_go_live() {
+  $js_option = intval(drush_get_option('js', 1));
+  $update_option = intval(drush_get_option('update', 1));
+  $cache_option = intval(drush_get_option('cache', 1));
+
+  // Print warning if godev be defined in setting.php
+  if (defined('GODEV')) {
+    drush_log("dev feature is not recommended when using this command. you need to remove GODEV constant in setting.php. \n", "warning");
+    // Exit
+    return;
+  }
+
+  // Validate text input from user
+  if ($js_option != 0 && $js_option != 1 || $update_option != 0 && $update_option != 1 || $cache_option != 0 && $cache_option != 1) {
+    drush_set_error('Data input invalid!');
+    // Exit
+    return;
+  }
+
+  // Enable page caching and block caching
+  go_live_context_callback($cache_option, 'go_live_cache');
+
+  // Enable aggregate css/js files
+  go_live_context_callback($js_option, 'go_live_js_css');
+
+  // Disable UI modules
+  go_live_disable_ui_module();
+
+  // Enable module update
+  go_live_context_callback($update_option, 'go_live_toggle_update_module');
+
+  // Disable module environment_indicator
+  go_live_disable_environment_indicator_module();
+}
+
+/**
+ * Call a function with action depending on the option input from user
+ */
+function go_live_context_callback($value_option, $function_name_callback) {
+  if ($value_option == 0) {
+    $function_name_callback('disable');
+  }
+  elseif ($value_option == 1) {
+    $function_name_callback('enable');
+  }
+}
+
+/**
+ * Enable or disable page/block cache if $action is enable then enable and vice versa
+ * 
+ * @param string $action type of action only receive two values enable or disable
+ * @return
+ */
+function go_live_cache($action) {
+  if (go_drush_confirm('You want to enable block/page caching?')) {
+
+    // If action enable config vaule equal 0 and vice versa 1
+    $value_config = $action == 'enable' ? 1 : 0;
+
+    // Enable page caching
+    variable_set('cache', $value_config);
+    // Enable block caching
+    variable_set('block_cache', $value_config);
+    // Config cache life time
+    $life_time = $action == 'enable' ? 1800 : 0;
+    variable_set('cache_lifetime', $life_time);
+    variable_set('page_cache_maximum_age', $life_time);
+
+    if ($action == 'disable') {
+      // Print message
+      drush_log('Block/page caching disabled.', "success");
+    }
+    elseif ($action == 'enable') {
+      // Print message
+      drush_log('Block/page caching enabled.', "success");
+    }
+  }
+}
+
+/**
+ * Enable or disable Js/css aggregation depend on $active vaule
+ * 
+ * @param String $action value is enable if you want to enable or vice versa
+ * @return
+ */
+function go_live_js_css($action) {
+  // If action enable config vaule equal 0 and vice versa 1
+  $value_config = $action == 'enable' ? 1 : 0;
+
+  if (go_drush_confirm('You want to enable js/css aggregation?')) {
+    // Enable aggregation css
+    variable_set('preprocess_css', $value_config);
+    // Enable aggragation js
+    variable_set('preprocess_js', $value_config);
+
+    if ($action == 'enable') {
+      // Print message
+      drush_log('Js/css aggregation enabled.', "success");
+    }
+    elseif ($action == 'disable') {
+      drush_log('Js/css aggregation disabled.', "success");
+    }
+  }
+}
+
+/**
+ * The UI module will disable
+ * Add UI module to be disable here
+ * 
+ * @return array
+ */
+function go_live_ui_modules_list() {
+  return array(
+    'field_ui', 'context_ui', 'migrate_ui', 'feeds_ui', 'og_ui',
+    'boxes_admin_ui', 'rules_admin', 'views_ui', 'context_ui',
+  );
+}
+
+/**
+ * Disable ui module have on go_ui_modules
+ * 
+ * @return boolean
+ */
+function go_live_disable_ui_module() {
+  if (go_drush_confirm('You want to disable all UI module?')) {
+    // Get list ui module to disable
+    $ui_modules = go_live_ui_modules_list();
+    $ui_modules_after_checked = array();
+
+    foreach ($ui_modules as $ui_module) {
+      // Module exists will disable
+      if (module_exists($ui_module)) {
+        $ui_modules_after_checked[] = $ui_module;
+      }
+    }
+
+    if (count($ui_modules_after_checked) > 0) {
+      // Disable list the UI modules
+      module_disable($ui_modules_after_checked);
+      $disable_ui_modules = implode(', ', $ui_modules_after_checked);
+      drush_log('UI modules be disable @modules_ui', array('@modules_ui' => $disable_ui_modules), "success");
+      return TRUE;
+    }
+  }
+  return FALSE;
+}
+
+/**
+ * Enable Update module
+ * 
+ * @param string $action enable or disable
+ */
+function go_live_toggle_update_module($action) {
+  if ($action == 'enable') {
+    if (!module_exists('update')) {
+      if (go_drush_confirm('You want to enable update module?')) {
+        // Enable update module
+        module_enable(array('update'));
+        drush_log('Module update has been enable success.', "success");
+      }
+    }
+  }
+  elseif ($action == 'disable') {
+    if (module_exists('update')) {
+      if (go_drush_confirm('You want to enable update module?')) {
+        // Disable module update
+        module_disable(array('update'));
+        drush_log('Module update has been disable.', 'success');
+      }
+    }
+  }
+}
+
+/**
+ * Disable module environment_indicator if it's enable
+ */
+function go_live_disable_environment_indicator_module() {
+  if (module_exists('environment_indicator')) {
+    if (go_drush_confirm('You want to disable environment_indicator module?')) {
+      // Disable module environment_indicator
+      module_disable(array('environment_indicator'));
+    }
+  }
+}
diff --git a/drush/go.mail.inc b/drush/go.mail.inc
index b721b73..d09e811 100644
--- a/drush/go.mail.inc
+++ b/drush/go.mail.inc
@@ -1,7 +1,15 @@
 <?php
 
 /**
+ * @file ./drush/go.mail.inc
+ *
+ * @author Cham Pham
+ */
+
+/**
  * Command to sent mail.
+ *
+ * @TODO Need Test
  */
 function drush_go_mail() {
   $module = 'go';
@@ -13,26 +21,21 @@ function drush_go_mail() {
 
   $message['subject'] = drush_get_option('subject', 'Test e-mail');
   $message['body'] = drush_get_option('body', 'This is a test e-mail.');
-  
-  $to = drush_get_option('to');
-  if(empty($to)) {
+
+  if (!$to = drush_get_option('to')) {
     return drush_set_error('--to option is required.');
-  } 
-  else {
-    // Retrieve the responsible implementation for this message.
-    $system = drupal_mail_system($module, $key);
-
-    // Format the message body.
-    $message = $system->format($message);
-
-    // Send e-mail.
-    $message['result'] = $system->mail($message);
-
-    if($message['result']) {
-      drush_log(dt("Test e-mail sent to @to success.", array('@to' => $to)), "success");
-    }
-    else { 
-      return drush_set_error('An error occurred while sending the test e-mail.');
-    }
-  }  
+  }
+
+  // Retrieve the responsible implementation for this message.
+  $system = drupal_mail_system($module, $key);
+
+  // Format the message body.
+  $message = $system->format($message);
+
+  // Send e-mail.
+  if (!$message['result'] = $system->mail($message)) {
+    return drush_set_error('An error occurred while sending the test e-mail.');
+  }
+
+  drush_log(dt("Test e-mail sent to @to success.", array('@to' => $to)), "success");
 }
diff --git a/go.info b/go.info
index 06a9dc2..ca6cc50 100644
--- a/go.info
+++ b/go.info
@@ -1,6 +1,7 @@
 name = Go Module
 version = 7.x-1.x
 description = Go Tools
+files[] = go.test
 dependencies[] = ctools
 package = Go1
 core = 7.x
diff --git a/go.module b/go.module
index 23e0c9e..7f5405b 100644
--- a/go.module
+++ b/go.module
@@ -1,6 +1,13 @@
 <?php
 
 /**
+ * @file ./go.module
+ *
+ * @author     Andy Truong
+ * @author     Quyen Bui
+ */
+
+/**
  * Autloading feature.
  *
  * This feature may slow down your Drupal a bit, to disable this function, define
@@ -16,6 +23,20 @@ if (!defined('GO_DISABLE_AUTOLOAD')) {
 }
 
 /**
+ * Implements hook_init().
+ */
+function go_init() {
+  go_google_analytics_code_insert();
+}
+
+/**
+ * Implements hook_go_api()
+ */
+function go_go_api() {
+  return array('api' => '1.0');
+}
+
+/**
  * Get modules that implements Go API.
  *
  * @return array
@@ -35,13 +56,6 @@ function go_get_module_apis($reset = FALSE) {
 }
 
 /**
- * Implements hook_go_api()
- */
-function go_go_api() {
-  return array('api' => '1.0');
-}
-
-/**
  * Helper function for quick cache get/set.
  *
  * @code
@@ -117,3 +131,34 @@ function go_cache($options, $callback, $arguments = array()) {
 
   return $return;
 }
+
+/**
+ * Build google analytics code
+ *
+ * @return string Google Analytics embed code
+ */
+function go_get_google_analytics_code($id) {
+  // get domain name
+  $domain = $GLOBALS['base_url'];
+  $domain = preg_replace('/^(http|https)+:\/\/+/si', '', $domain);
+
+  return "(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
+  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
+  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
+  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
+  ga('create', '$id', '$domain');
+  ga('send', 'pageview');";
+}
+
+/**
+ * Insert google analytics code into every page footer
+ *
+ * @see go_init()
+ */
+function go_google_analytics_code_insert() {
+  if (defined('GO_GOOGLE_ANALYTICS')) {
+    drupal_add_js(go_get_google_analytics_code(GO_GOOGLE_ANALYTICS), array(
+      'type' => 'inline', 'scope' => 'footer',
+    ));
+  }
+}
diff --git a/go.test b/go.test
index bc98b34..93e3531 100644
--- a/go.test
+++ b/go.test
@@ -1,6 +1,7 @@
 <?php
 
 class GoCacheTestCase extends DrupalUnitTestCase {
+
   public function getInfo() {
     return array(
       'name' => 'Go Cache',
@@ -18,11 +19,15 @@ class GoCacheTestCase extends DrupalUnitTestCase {
     );
 
     // Init the value
-    $time_1 = go_cache($options, function () { return time(); });
+    $time_1 = go_cache($options, function () {
+        return time();
+      });
     sleep(2);
 
     // Call go_cache() again
-    $time_2 = go_cache($options, function () { return time(); });
+    $time_2 = go_cache($options, function () {
+        return time();
+      });
 
     // The value should be same — it's cached.
     $this->assertEqual($time_1, $time_2);
@@ -92,9 +97,11 @@ class GoCacheTestCase extends DrupalUnitTestCase {
   public function time() {
     return time();
   }
+
 }
 
 class GoAutoloadTestCase extends DrupalUnitTestCase {
+
   public function getInfo() {
     return array(
       'name' => 'Go Autoloader',
@@ -106,4 +113,38 @@ class GoAutoloadTestCase extends DrupalUnitTestCase {
   public function testAutoloader() {
     $this->assertTrue(class_exists('Drupal\go\Tests\Foo'));
   }
+
 }
+
+class GoGoogleAnalyticsTestCase extends DrupalWebTestCase {
+
+  public static function getInfo() {
+    return array(
+      'name' => 'Go Google analytics',
+      'description' => 'Check the working of the google analytics feature.',
+      'group' => 'Go Module'
+    );
+  }
+
+  function setUp() {
+    // Enable the module.
+    parent::setUp('go');
+    
+    if (!defined('GO_GOOGLE_ANALYTICS')) {
+      define('GO_GOOGLE_ANALYTICS', 'GA_KEY');
+    }
+  }
+
+  public function testGoGoogleAnalyticsCodeInsert() {
+    // go to home page
+    $this->drupalGet($GLOBALS['base_url']);
+    // get home page content
+    $home_page_html = $this->drupalGetContent();
+    // get ga code
+    $google_analytics_code = go_analytics_script_code(GO_GOOGLE_ANALYTICS);
+    $strpos = strpos($home_page_html, $google_analytics_code);
+    // we expect that ga code inserted to home page
+    $this->assertTrue($strpos !== FALSE);
+  }
+
+}
\ No newline at end of file
diff --git a/includes/go.autoload.inc b/includes/go.autoload.inc
index bab36c2..b7c665d 100644
--- a/includes/go.autoload.inc
+++ b/includes/go.autoload.inc
@@ -1,6 +1,12 @@
 <?php
 
 /**
+ * @file ./includes/go.autload.inc
+ *
+ * @author Andy Truong
+ */
+
+/**
  * You can tell go.module to find your directory by define go_autoload() in your
  * settings.php
  */
